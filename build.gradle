plugins {
	id 'org.springframework.boot' version '2.1.4.RELEASE'
	id 'java'
	id 'nu.studer.jooq' version '3.0.3'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	compile "org.apache.spark:spark-core_2.11:2.4.1"
	compile "org.apache.spark:spark-sql_2.11:2.4.1"
	compile "org.apache.spark:spark-mllib_2.11:2.4.1"
	compile 'com.google.guava:guava:14.0.1'
	runtime 'com.h2database:h2'
	jooqRuntime 'com.h2database:h2:1.4.199'
}
configurations.all {
	exclude module: 'slf4j-log4j12'
	exclude module: 'guava:16.0.1'
}

jooq {
	version = '3.11.10'
	edition = 'OSS'
	sample(sourceSets.main) {
		jdbc {
			driver = 'org.h2.Driver'
			url = 'jdbc:h2:tcp://localhost/~/jooq'
			user = 'jasuil'
			password = ''
		}
		generator {
			name = 'org.jooq.codegen.DefaultGenerator'
			database {
				name = 'org.jooq.meta.h2.H2Database'
				includes = '.*'
				excludes = ''
			}
			target {
				packageName = 'com.example.schema'
				directory = 'src/main/java'
			}
		}
	}
}

tasks.generateSampleJooqSchemaSource.with {
	def out = new ByteArrayOutputStream()
	javaExecSpec = { JavaExecSpec s ->
		s.standardOutput = out
		s.errorOutput = out
		s.ignoreExitValue = true
		s.jvmArgs '-Xmx512M'
	}
	execResultHandler = { ExecResult r ->
		if (r.exitValue != 0) {
			throw new RuntimeException('jOOQ source code generation failed:\n\n' + out.toString())
		}
	}
}
